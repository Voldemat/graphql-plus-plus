enum ChatsFilterType {
  ALL
  PERSONAL
  WITH_ORDERS
}

type ChatUser {
  user: User!
  isOnline: Boolean!
}

type RegularChat {
  id: String!
  user: ChatUser!
  lastMessage: Message
  unreadMessagesCount: Int!
  createdAt: String!
  updatedAt: String!
  hasOrders: Boolean!
  isMuted: Boolean!
}

type TechSupportChat {
  id: String!
  unreadMessagesCount: Int!
}

type MessengerData {
  allChats(limit: Int! = 20): RegularChatList!
  personalChats(limit: Int! = 20): RegularChatList!
  chatsWithOrders(limit: Int! = 20): RegularChatList!
}

type RegularChatList {
  total: Int!
  chats: [RegularChat!]!
  unreadChatsCount: Int!
}

union RegularChatOrBE = RegularChat | BaseError
union RegularChatListOrBE = RegularChatList | BaseError
union MessengerDataOrBE = MessengerData | BaseError
union TechSupportChatOrBE = TechSupportChat | BaseError

extend type Query {
  getMessengerData(limit: Int! = 20): MessengerDataOrBE!
  getRegularChat(userId: String!): RegularChatOrBE!
  getRegularChats(skip: Int! = 0, limit: Int! = 20, filter: ChatsFilterType! = ALL, query: String): RegularChatListOrBE!
  getTechSupportChats(search: String, skip: Int! = 0, limit: Int! = 20): RegularChatListOrBE!
  getTechSupportChat: TechSupportChatOrBE!
}

extend type Mutation {
  createTechSupportChat: TechSupportChatOrBE!
  createRegularChat(userId: String!): RegularChatOrBE!
  deleteChat(id: String!): BaseError
  muteChat(id: String!): BaseError
  unmuteChat(id: String!): BaseError
  readChat(id: String!): BaseError
}
