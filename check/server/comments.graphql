enum CommentContentType {
    PUBLICATION
    ARTICLE
    COMMENT
}

enum CommentReactionType {
    THUMBS_UP
    FACE_WITH_TEARS
    FACE_WITH_OPEN_MOUTH
    CRYING_FACE
    FOLDER_HANDS
    PILE_OF_POO
    POUTING_FACE
}

input CommentContentIn {
    id: String!
    type: CommentContentType!
}

input CommentIn {
    content: CommentContentIn!
    text: String!
}

type Reaction {
  type: CommentReactionType!
  count: Int!
}
type CommentReactions {
    myReaction: CommentReactionType
    reactions: [Reaction!]!
}

type Comment {
    id: String!
    target: CommentTarget!
    author: User!
    createdAt: String!
    updatedAt: String!
    hasBeenRead: Boolean!

    references: [RecordType!]!
    isLiked: Boolean!
    text: String!
    likesCount: Int!
    reactions: CommentReactions!
    repliesCount: Int!
}

type CommentList {
    total: Int!
    comments: [Comment!]!
}

union CommentTarget = Publication | Article | Comment
union CommentOrEWF = Comment | ErrorWithFields
union CommentListOrEWF = CommentList | ErrorWithFields

extend type Query {
    getContentComments(
        content: CommentContentIn!,
        skip: Int! = 0,
        limit: Int! = 20
    ): CommentListOrEWF!
    getCommentReplies(
        id: String!,
        skip: Int! = 0,
        limit: Int! = 20
    ): CommentListOrEWF!
    getReactionAuthors(
        commentId: String!,
        reactionType: CommentReactionType!,
        skip: Int! = 0,
        limit: Int! = 20
    ): UserListOrEWF!
}

extend type Mutation {
    createComment(comment: CommentIn!): CommentOrEWF!
    deleteComment(id: String!): BaseError
    setReactionToComment(id: String!, reaction: CommentReactionType): BaseError
}
