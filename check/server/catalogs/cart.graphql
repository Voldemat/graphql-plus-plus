input CartItemIn {
    productId: String!
    selectedProperties: [RecordTypeIn!]!
}

type CartItem {
    id: String!
    selectedProperties: [RecordType!]!
    product: Product!
}

type CartItemList {
    total: Int!
    items: [CartItem!]!
}

type Cart {
    fullPrice: Int!
    items: CartItemList!
}

union CartOrBE = Cart | BaseError
union CartItemOrEWF = CartItem | ErrorWithFields
union CartItemListOrBE = CartItemList | BaseError

extend type Query {
    getCart: CartOrBE!
    getCartItems(
        skip: Int! = 0,
        limit: Int! = 20
    ): CartItemListOrBE!
}

extend type Mutation {
    createCartItem (item: CartItemIn!): CartItemOrEWF!
    deleteCartItem (productId: String!): BaseError
}