enum ECatalogItemType {
    PRODUCT
    SERVICE
}

input CatalogIn {
    cover: Upload
}

input CatalogInUpdate {
    cover: Upload
}

input PriceRange {
    minPrice: Int
    maxPrice: Int
}

input RecommendedCatalogItemsFilters {
    type: ECatalogItemType
    price: PriceRange!
    originCountry: [String!]!
    highRate: Boolean!
    hasDiscount: Boolean!
}

type Catalog {
    author: User!
    createdAt: String!
    updatedAt: String!
    cover: File
    categories(skip: Int! = 0, limit: Int! = 20): [Category!]!
    unviewedItemsCount: Int!
}

type CatalogList {
    total: Int!
    catalogs: [Catalog!]!
}

type CatalogItemReviews {
    enabled: Boolean!
    averageRating: Float
    total: Int!
}

type OriginCountries {
    countries: [String!]!
}

interface ICatalogItem {
    id: String!
    author: User!
    createdAt: String!
    updatedAt: String!
    isFavourite: Boolean!
    attachments: [File!]!
    category: Category!
    name: String!
    price: Int!
    oldPrice: Int
    is18Plus: Boolean!
    reviews: CatalogItemReviews!
}

union CatalogItem = Product | Service

type CatalogItemList {
    total: Int!
    items: [CatalogItem!]!
}

union CatalogOrBE = Catalog | BaseError
union CatalogOrEWF = Catalog | ErrorWithFields
union CatalogListOrBE = CatalogList | BaseError
union CatalogItemListOrBE = CatalogItemList | BaseError
union CatalogItemListOrEWF = CatalogItemList | ErrorWithFields
union OriginCountriesOrBE = OriginCountries | BaseError

extend type Query {
    getCatalog(authorId: String!): CatalogOrBE!
    getCatalogCategories(
        authorId: String!,
        skip: Int! = 0,
        limit: Int! = 20
    ): CategoryListOrBE!
    getCatalogItems(
        authorId: String!,
        skip: Int! = 0,
        limit: Int! = 20,
        categoryIds: [String!],
        query: String
    ): CatalogItemListOrEWF!
    getRecommendedCatalogItems(
        skip: Int! = 0,
        limit: Int! = 20,
        query: String,
        filters: RecommendedCatalogItemsFilters!
    ): CatalogItemListOrBE!
    getSubscribedCatalogItems(
        skip: Int! = 0,
        limit: Int! = 20,
        query: String
    ): CatalogItemListOrBE!
    getSubscribedCatalogs(
        skip: Int! = 0,
        limit: Int! = 20,
        query: String
    ): CatalogListOrBE!
    getOriginCountries: OriginCountriesOrBE!
}

extend type Mutation {
    createCatalog(catalog: CatalogIn!): CatalogOrEWF!
    updateCatalog(catalog: CatalogInUpdate!): CatalogOrEWF!
    deleteCatalog: BaseError
}
