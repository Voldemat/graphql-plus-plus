enum AlbumType {
    PUBLICATION
    PHOTO_VIDEO
}

input AlbumIn {
    privacy: PrivacyType!
    name: String!
    cover: Upload!
    internalCover: Upload
    description: String
    contentIds: [String!]!
    type: AlbumType!
}

input AlbumInUpdate {
    privacy: PrivacyType
    name: String
    cover: Upload
    internalCover: Upload
    description: String
}

input AlbumContentInUpdate {
    addedContentIds: [String!]!
    removedContentIds: [String!]!
}

type Album {
    id: String!
    author: User!
    privacy: PrivacyType!
    createdAt: String!
    updatedAt: String!
    name: String!
    cover: File!
    internalCover: File
    description: String
    type: AlbumType!
    unviewedContentCount: Int!
}

type AlbumList {
    total: Int!
    albums: [Album!]!
}

union AlbumOrEWF = Album | ErrorWithFields
union AlbumOrBE = Album | BaseError
union AlbumListOrBE = AlbumList | BaseError

extend type Query {
    retrieveAlbum (id: String!): AlbumOrBE!
    getAlbumContent(id: String!, skip: Int! = 0, limit: Int! = 20): PublicationListOrBE!
    getAlbumsByUserId (id: String!, skip: Int! = 0, limit: Int! = 20): AlbumListOrBE!
    getSubscribedAlbums (skip: Int! = 0, limit: Int! = 20): AlbumListOrBE!
    getAlbumsCoverByUserId(id:String!): FileOrBE!
}

extend type Mutation {
    createAlbum (album: AlbumIn!): AlbumOrEWF!
    updateAlbum (id: String!, album: AlbumInUpdate!): AlbumOrEWF!
    deleteAlbum (id: String!): BaseError
    setAlbumsCover (cover: Upload): BaseError
    updateAlbumContent (id: String!, content: AlbumContentInUpdate!): ErrorWithFields
}
