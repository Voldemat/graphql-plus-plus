type UserWithPublications {
    user: User!
    publications(limit: Int! = 4): [Publication!]!
}

type UserWithPublicationsList {
    total: Int!
    users: [UserWithPublications!]!
}

input GeolocationIn {
    lat: Float!
    lng: Float!
}

input SearchDistance {
    radius: Int!
    currentGeolocation: GeolocationIn!
}

input UsersSearchFilters {
    withDeliveryOnly: Boolean!
    isOpenOnly: Boolean!
    distance: SearchDistance
}

union UserWithPublicationsListOrBE = UserWithPublicationsList | BaseError

extend type Query {
    searchUsers(
        query: String!,
        filters: UsersSearchFilters!,
        skip: Int! = 0,
        limit: Int! = 20
    ): UserWithPublicationsListOrBE!
    searchPublications(
        query: String!,
        skip: Int! = 0,
        limit: Int! = 20
    ): PublicationListOrBE!
    getRecentSearchQueries(limit: Int! = 10): StringArrayOrBE!
    getSearchHints(query: String!, limit: Int! = 10): StringArrayOrBE!
}


