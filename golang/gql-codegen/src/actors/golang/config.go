package golang

import (
	"bufio"
	"bytes"
	"go/format"
	"os"
	"syscall"

	"github.com/dave/jennifer/jen"
	"go.uber.org/zap"
)

type GolangActorConfig struct {
	PackageName string
	File        *os.File
}

func CreateGolangActorConfig(
	logger *zap.Logger,
	packageName string,
	path string,
) GolangActorConfig {
	var file *os.File
	if _, err := os.Stat(path); os.IsNotExist(err) {
		file, err = os.Create(path)
		if err != nil {
			logger.Fatal("Failed to create file", zap.String("path", path), zap.Error(err))
		}
	} else {
		file, err = os.OpenFile(path, syscall.O_WRONLY, 0644)
		if err != nil {
			logger.Fatal("Failed to open file", zap.Error(err))
		}
	}
	return GolangActorConfig{
		File:        file,
		PackageName: packageName,
	}
}

func (c *GolangActorConfig) CreateJenFile() *jen.File {
	f := jen.NewFile(c.PackageName)
	f.PackageComment("Code generated by generator, DO NOT EDIT.")
	return f
}

func (c *GolangActorConfig) SaveFile(file *jen.File) error {
	var buffer bytes.Buffer
	writer := bufio.NewWriter(&buffer)
	err := file.Render(writer)
	if err != nil {
		return err
	}
	output, err := format.Source(buffer.Bytes())
	if err != nil {
		return err
	}
	_, err = c.File.Write(output)
	return err
}
